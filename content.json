{"meta":{"title":"Hexo","subtitle":"","description":"","author":"TingzE","url":"tingze.github.io","root":"/"},"pages":[],"posts":[{"title":"quickSort","slug":"quickSort","date":"2021-02-12T08:56:36.000Z","updated":"2021-03-09T09:05:21.577Z","comments":true,"path":"2021/02/12/quickSort/","link":"","permalink":"tingze.github.io/2021/02/12/quickSort/","excerpt":"快速排序","text":"快速排序 简单介绍快速排序（Quicksort），简称快排，也称分区交换排序（分而治之的思想），最早由东尼·霍尔提出。在平均情况下，排列n个项目要O(n logn)次比较。 算法描述首先在数据中选取一个基准值temp 然后从末尾向前寻找比temp小的数，放到temp前从开头向后寻找比temp大的数，放到temp后 递归，对基准值两边继续进行上述操作，直到各区间只有一个数 算法实现以一个数组为例子 0 1 2 3 4 5 6 7 8 9 48 85 57 42 60 72 83 73 88 6 初始时i=0, j=9, temp = array[i] = 48现在相当于将array[0]提取出来，存放到temp中从后向前找到比temp小的数为j=9,array[9]=6，将array[9]填补到array[0]中array[0]=array[9];i++,这样array[9]就空了出来数组为 0 1 2 3 4 5 6 7 8 9 6 85 57 42 60 72 83 73 88 6 从前向后寻找比temp大的数，j=1，array[1]=85，将array[1]存放到刚刚空出来array[9]的位置array[9]=array[1];j--，此时array[1]相当于空了出来数组为 0 1 2 3 4 5 6 7 8 9 6 85 57 42 60 72 83 73 88 85 此时，i=1,j=8 重复上述步骤继续从后面向前寻找比temp小的数，发现j=3，array[3]=42，将其填入array[1]，array[1]=array[3];i++从前向后寻找，i=2，array[2]比temp大，array[3]=array[2];j--数组为 0 1 2 3 4 5 6 7 8 9 6 42 57 57 60 72 83 73 88 85 此时，i==j=2，退出，将temp填入刚刚空出来的array[2] 数组变为 0 1 2 3 4 5 6 7 8 9 6 42 48 57 60 72 83 73 88 85 总结 i=L,j=R,temp=array[i] j–从后向前寻找比temp小的数，填入array[i] i++从前向后寻找比temp大的数，填入array[j] 重复第2、3步直到i==j，将temp填入array[i] 递归，对（L，i-1）（i+1,R）两个区间进行第2、3、4步C代码1234567891011121314151617181920212223void quickSort(int * ar,int l,int r)&#123; if(l&lt;r) &#123; //Swap(ar[l],ar[(l+r)]/2);//交换数组起始与中间的值 int i=l,j=r,temp=ar[i]; while(i&lt;j) &#123; while(i&lt;j &amp;&amp; ar[j]&gt;=temp) j--; if(i&lt;j) ar[i++]=ar[j]; while(i&lt;j &amp;&amp; ar[i]&lt;temp) i++; if(i&lt;j) ar[j--]=ar[i]; &#125; ar[i]=temp; quickSort(l,i-1);//递归调用 quickSort(i+1,r); &#125;&#125;","categories":[],"tags":[]},{"title":"素数筛法","slug":"素数筛法","date":"2020-12-26T07:33:27.000Z","updated":"2020-12-26T08:32:56.157Z","comments":true,"path":"2020/12/26/素数筛法/","link":"","permalink":"tingze.github.io/2020/12/26/%E7%B4%A0%E6%95%B0%E7%AD%9B%E6%B3%95/","excerpt":"从1-10000中筛选出所有的素数","text":"从1-10000中筛选出所有的素数 素数，因数只有自身和1，下面是几次迭代的筛选方法 最简单的判断筛选123456789101112131415int prime(int n)&#123; for(int i=2;i&lt;n;i++) &#123; if(n%i==0) &#123; return 0; break; &#125; else &#123; return 1; &#125; &#125;&#125; 这种方法一次判断每个数，效率很低，在比赛和OJ平台中，99%会超时。 剔除非素数我们知道，一个数的倍数，不管多少倍，一定是合数，所以只要剔除这些合数即可。首先创建1个bool型数组bool num[10010]为什么要设置容量为100010，而不是正好的100000？多出来的10是为了防止鲁棒性（一个优秀的学长告诉我的）默认数组中每个值都为0，接下来的工作是找到合数，将其值设为1比如num[4]=1，num[8]=1。 12345678910111213bool num[10010];void prime(void)&#123; num[0]=1; num[1]=1; for(int i=2;i&lt;10000,;i++) &#123; for(int j=2*i;j&lt;10000;j+=i) //所有i的倍数全部剔除 &#123; num[j]=1; &#125; &#125;&#125; 进一步优化第一层循环i&lt;10000，这个条件可以改为i*i&lt;10000因为任何在100-10000中的合数，其一个因子在100-10000中，另一个因子一定在1-100中比如，9999=99*101，在检验过99后，不用检验101 第二层循环改为for(int j=i*i;j&lt;10000;j+=i)在i=2时，我们就已经把所有的2的倍数都遍历一遍，在i=3时，23已经检验过了，没有必要检验32。同理，在i=4时，我们也不用检验42，43 第一层和第二层中间加入素数判断在第一层遍历i时，如果i为已经验算过的合数，即num[i]==1,我们可以将其过滤调，使用if语句即可 12345678910111213141516bool num[10010];void prime(void)&#123; num[0]=1; num[1]=1; for(int i=2;i*i&lt;10000,;i++) &#123; if(!num[i]) //过滤 &#123; for(int j=i*i;j&lt;10000;j+=i) &#123; num[j]=1； &#125; &#125; &#125;&#125; 总结至此，优化全部完成。还存在的一些问题是大素数的检验。对于大素数，动辄数百位，一般采用费马小定理素性检验，指定安全系数K，对其进行K轮的素性检验，则其有1-1/2^K的概率为素数。","categories":[],"tags":[{"name":"C语言","slug":"C语言","permalink":"tingze.github.io/tags/C%E8%AF%AD%E8%A8%80/"}]},{"title":"C语言基础","slug":"C语言","date":"2020-08-31T14:58:36.000Z","updated":"2020-08-31T15:48:43.850Z","comments":true,"path":"2020/08/31/C语言/","link":"","permalink":"tingze.github.io/2020/08/31/C%E8%AF%AD%E8%A8%80/","excerpt":"关于C语言数据类型","text":"关于C语言数据类型 数据1. 整数向下取整int cost=12.99;cost的值为12 2. 浮点数3.16E7表示3.1610^7*两个很大的数相减，浮点数损失的精度更多 %f 打印十进制计数制的浮点数%e 打印指数计数法的浮点数 3. 数制 %d 十进制 %o 八进制 %x 十六进制 在前面加#显示前缀 4. char1char grade = &apos;FATE&apos;;(雾) 定义一个’FATE’字符常量，把4个独立的8位ASCII码储存在一个32位存储单元中。只有最后8位有效，grade的值是E。 5. 转义序列 \\a 警报 \\b 退格(通常不会擦除退回经过的字符) \\f 换页 \\r 回车 \\\\ 反斜杠 \\&#39; 单引号 刷新输出C标准明确了何时将缓冲区中的内容发送到屏幕 当缓冲区满、遇到换行字符、需要输入时","categories":[],"tags":[{"name":"C","slug":"C","permalink":"tingze.github.io/tags/C/"}]},{"title":"powershell","slug":"powershell","date":"2020-08-31T12:23:14.000Z","updated":"2020-08-31T12:23:14.034Z","comments":true,"path":"2020/08/31/powershell/","link":"","permalink":"tingze.github.io/2020/08/31/powershell/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"cmd输入python弹出微软商店","slug":"python环境变量","date":"2020-07-03T07:56:32.000Z","updated":"2020-12-26T07:07:17.340Z","comments":true,"path":"2020/07/03/python环境变量/","link":"","permalink":"tingze.github.io/2020/07/03/python%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/","excerpt":"微软商店好屑","text":"微软商店好屑 问题描述在cmd中输入python，环境变量已经设置，然而敲下回车，弹出的确实微软商店的python界面 问题解决打开环境变量页面查看path发现一条%USERPROFILE%\\AppData\\Local\\Microsoft\\WindowsApps路径没错，罪魁祸首就是它。直接删除（建议备份一下重启cmd，再次运行python，完美解决 更新一下在一位学长的建议下，不要乱删路径。在path中的上下位置决定了优先级，将上述路径移至python路径下方然后重启电脑即可","categories":[],"tags":[{"name":"python","slug":"python","permalink":"tingze.github.io/tags/python/"}]},{"title":"2020lei了","slug":"2020lei了","date":"2020-01-10T14:23:44.000Z","updated":"2020-01-10T15:29:44.688Z","comments":true,"path":"2020/01/10/2020lei了/","link":"","permalink":"tingze.github.io/2020/01/10/2020lei%E4%BA%86/","excerpt":"2020年lei了，它lei了","text":"2020年lei了，它lei了 关于20192019年感觉好摸啊。一时摸鱼一时爽，一直摸鱼一直爽 打死 新的一年以假期开始，进行了一些新的尝试。 在Surface Pro6上安装kali虚拟机有一说一，这是我干过最蠢的事情了。 本来想着一切以轻便为主，但Surface的屏幕适配并不允许。 结果显而易见，那就是代码字母小的一笔，再加上19.4版本的kali中文全是乱码，调教令人崩溃。 所以，还是在美帝良心想上装了19.4的kali。 多台电脑更新Hexo如果一切顺利的话，那么这篇博文嘤该是用另一台电脑写的。 把坑踩完了之后，会说说如何用多设备更新Hexo博客，毕竟台式+笔电的组合也不少。 CTF信息安全专业本科菜鸡一只。 干啥啥不行，吃饭第一名 假期会做一些CTF相关。主要以学习为主。 紫罗兰永恒花园今天，紫罗兰永恒花园剧场版首映，昨晚折腾kali（甚至在搞WSL下的kali）没睡好，结果睡过了。 完美错过，明天再看吧","categories":[],"tags":[{"name":"随笔","slug":"随笔","permalink":"tingze.github.io/tags/%E9%9A%8F%E7%AC%94/"}]},{"title":"主题配置","slug":"主题配置","date":"2019-12-03T14:58:29.000Z","updated":"2019-12-03T15:42:44.068Z","comments":true,"path":"2019/12/03/主题配置/","link":"","permalink":"tingze.github.io/2019/12/03/%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/","excerpt":"更换主题步骤","text":"更换主题步骤 主题推荐一款精致，便捷的主题总能是博客增色不少。下面，我推荐两款试过的主题 第一款 NEXT主题NEXT主题整体简约明快，可扩展性很高。 第二款 Yilia主题Yilia主题功能齐全，下载即用，配置简单。 配置主题我目前使用的是Yilia主题接下来描述下Yilia主题的配置过程 下载 命令行git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia执行以上命令即可在博客根目录中的themes下创建yilia文件夹并下载 普通下载访问网页https://github.com/litten/hexo-theme-yilia，进行下载。将文件放入themes中 修改配置文件打开根目录中_config.yml文件将themes后面的默认landscape修改为yilia 在末尾添加 123456789101112131415161718jsonContent: meta: false pages: false posts: title: true date: true path: true text: false raw: false content: false slug: false updated: false comments: false link: false permalink: false excerpt: false categories: false tags: true 保存即可 网站图标及头像配置首先在yilia\\source下创建assets文件夹，在其中再建立img文件夹，将用到的图片放入其中 打开yilia下的_congfig.yml文件找到头像项在avatar后补充/assets/img/picName.jpg 同理在favicon后添加网页图标的图片地址 其他细枝末节的设定，可以根据_config.yml中的注释自行设定","categories":[],"tags":[{"name":"themes yilia","slug":"themes-yilia","permalink":"tingze.github.io/tags/themes-yilia/"}]},{"title":"天气之子","slug":"天气之子","date":"2019-11-15T08:51:17.000Z","updated":"2019-11-20T10:21:33.794Z","comments":true,"path":"2019/11/15/天气之子/","link":"","permalink":"tingze.github.io/2019/11/15/%E5%A4%A9%E6%B0%94%E4%B9%8B%E5%AD%90/","excerpt":"《天气之子》我吹爆","text":"《天气之子》我吹爆 我作为新海诚的骨灰级粉丝，第一时间就去看了天气之子。观感良好。故水一篇没有什么多余的可说，看的很感动。阳菜很可爱，帆高很勇敢画面很精致，音乐很好听","categories":[],"tags":[{"name":"随笔","slug":"随笔","permalink":"tingze.github.io/tags/%E9%9A%8F%E7%AC%94/"}]},{"title":"Blog搭建二三事","slug":"Blog搭建二三事","date":"2019-11-15T08:25:34.000Z","updated":"2019-11-21T06:53:35.838Z","comments":true,"path":"2019/11/15/Blog搭建二三事/","link":"","permalink":"tingze.github.io/2019/11/15/Blog%E6%90%AD%E5%BB%BA%E4%BA%8C%E4%B8%89%E4%BA%8B/","excerpt":"本沙雕搭建blog可谓是一波三折。起初被无良学长坑害分享一些hexo博客搭建的心得","text":"本沙雕搭建blog可谓是一波三折。起初被无良学长坑害分享一些hexo博客搭建的心得 事前准备搭建博客之前的准备工作 硬件一台电脑 软件node.jsgithexo 流程 建立根目录可以直接在目标位置新建文件夹重命名也可以使用mkdir指令创建（个人推荐熟悉命令行操作） 建立安装好一系列组件后在刚刚创建的根目录下打开终端,使用hexo init指令进行初始化使用hexo s启动，可以在4000端口localhost:4000进行本地浏览,即可看到初始界面 常规操作hexo clean进行清空缓存操作hexo g进行生成 推到远端推到远端这里选取的借助Github首先，拥有一个Github账号（什么!?竟然还没有）新建仓库，以自己的Github名命名仓库之前说过，要安装Git右键打开Git终端设置用户名和密码git config --global user.name &quot;yourname&quot;git config --global user.email &quot;yourEmailAddress&quot;设置好后生成ssh密钥ssh-keygen -t rsa -C &#39;youremail&#39;不断回车然后查看sshcat ~/.ssh/id_rsa.pub将你看到的一坨字符复制在github上进行相关ssh设置即可 然后是本地的配置打开本地的blog根目录，对_config.yml文件进行修改拉到最下看到deploy在下面添加repo: &quot;你的GitHub仓库地址&quot;branch: master 终端切换到根目录位置npm install hexo-deployer-git --save安装一个插件如果安装过慢或者失败，可以更换为淘宝npm镜面源npm config set registry http://registry.npm.taobao.org/然后再安装cnpm install hexo-deployer-git --save 一切准备就绪，启动终端，cd到博客根目录hexo d将博客推到远端前往GitHub仓库可以发现多了一些东西此时，再浏览器地址栏输入github仓库地址的后缀即”yourname.github.io”大功告成 主题和一些配置问题，留到下期","categories":[],"tags":[{"name":"Blog","slug":"Blog","permalink":"tingze.github.io/tags/Blog/"}]},{"title":"First Article","slug":"First-Article","date":"2019-11-14T06:12:48.000Z","updated":"2019-11-15T08:54:34.931Z","comments":true,"path":"2019/11/14/First-Article/","link":"","permalink":"tingze.github.io/2019/11/14/First-Article/","excerpt":"第一篇博文关于markdowm几经周折后，Blog终于建好了。第一篇记录些关于markdown的内容。（码住，方便健忘症的自己）","text":"第一篇博文关于markdowm几经周折后，Blog终于建好了。第一篇记录些关于markdown的内容。（码住，方便健忘症的自己） 标题用’#’号起始，’#’个数表示标题级数 字体斜体左右用一个*号将内容包起来 粗体左右用两个*号将内容包起来 斜体加粗左右用三个*号将内容包起来 删除线用两个~将内容包起来 示例1234**这是加粗的文字***这是倾斜的文字*`***这是斜体加粗的文字***~~这是加删除线的文字~~ 效果如下 这是加粗的文字这是倾斜的文字`这是斜体加粗的文字这是加删除线的文字 引用在文字前加&gt;即可 示例1&gt;鲁迅：我全都要。 效果如下 鲁迅：我全都要。 分割线三个或者三个以上的-或者*都可以 示例1234-------******* 效果如下（其实都一样的分割线） 图片1![图片下方显示文字](图片地址 &quot;鼠标悬停时显示内容&quot;) 示例1![Shinobu](https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcStdi8R2k3Z0vXlONXllpGomfV_UrkrrpV-7DRv_bVo5wj47wPz&amp;s &quot;我老婆！！&quot;) 效果如下 超链接1[超链接名](地址 &quot;鼠标悬停显示内容&quot;) 示例1[bilibili](www.bilibili.com &quot;B站&quot;) 效果如下bilibili 列表无序列表12345- 列表内容+ 列表内容* 列表内容注意：- + * 跟内容之间都要有一个空格 效果如下 列表内容 列表内容 列表内容 有序列表数字加点 123451.列表内容2.列表内容3.列表内容注意：序号跟内容之间要有空格 效果如下 1.列表内容2.列表内容3.列表内容 列表嵌套上一级和下一级之间加上三个空格即可 12345+ 一级无序列表内容 -二级无序列表内容 +二级无序列表内容 *二级无序列表内容 效果如下 一级无序列表内容 二级无序列表内容 二级无序列表内容 二级无序列表内容 代码单行代码：用一个反引号’`’包起来 代码块：代码用三个反引号包起来，且三个单引号分别占一行","categories":[],"tags":[{"name":"markdown","slug":"markdown","permalink":"tingze.github.io/tags/markdown/"}]}]}